# Find the Boost library.
#
# This module defines the following variables:
#
# * Boost_INCLUDE_DIRS
# * Boost_LIBRARIES
#
# This module defines the following imported targets:
#
# * Boost::atomic
# * Boost::chrono
# * Boost::container
# * Boost::context
# * Boost::contract
# * Boost::coroutine
# * Boost::date_time
# * Boost::exception
# * Boost::fiber
# * Boost::filesystem
# * Boost::graph
# * Boost::iostreams
# * Boost::locale
# * Boost::log
# * Boost::math_c99
# * Boost::math_c99f
# * Boost::math_c99l
# * Boost::math_tr1
# * Boost::math_tr1f
# * Boost::math_tr1l
# * Boost::nowide
# * Boost::program_options
# * Boost::random
# * Boost::regex
# * Boost::serialization
# * Boost::stacktrace
# * Boost::system
# * Boost::test
# * Boost::thread
# * Boost::timer
# * Boost::type_erasure
# * Boost::wave
#
# This module defines the following interfaces:
#
# * Boost

find_package(ZLIB REQUIRED)

find_path(Boost_INCLUDE_DIR NAMES boost/version.hpp PATH_SUFFIXES boost-1_74)
set(Boost_INCLUDE_DIRS
    ${Boost_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIRS})

set(Boost_LIB_SUFFIX)
if(WIN32)
    if(CMAKE_BUILD_TYPE MATCHES "^Debug$")
        set(Boost_LIB_SUFFIX -vc142-mt-gd-x64-1_74)
    else()
        set(Boost_LIB_SUFFIX -vc142-mt-x64-1_74)
    endif()
endif()

find_library(Boost_ATOMIC NAMES boost_atomic${Boost_LIB_SUFFIX})
find_library(Boost_CHRONO NAMES boost_chrono${Boost_LIB_SUFFIX})
find_library(Boost_CONTAINER NAMES boost_container${Boost_LIB_SUFFIX})
find_library(Boost_CONTEXT NAMES boost_context${Boost_LIB_SUFFIX})
find_library(Boost_CONTRACT NAMES boost_contract${Boost_LIB_SUFFIX})
find_library(Boost_COROUTINE NAMES boost_coroutine${Boost_LIB_SUFFIX})
find_library(Boost_DATE_TIME NAMES boost_date_time${Boost_LIB_SUFFIX})
#find_library(Boost_EXCEPTION NAMES boost_exception${Boost_LIB_SUFFIX})
find_library(Boost_FIBER NAMES boost_fiber${Boost_LIB_SUFFIX})
find_library(Boost_FILESYTEM NAMES boost_filesystem${Boost_LIB_SUFFIX})
find_library(Boost_GRAPH NAMES boost_graph${Boost_LIB_SUFFIX})
find_library(Boost_IOSTREAMS NAMES boost_iostreams${Boost_LIB_SUFFIX})
find_library(Boost_LOCALE NAMES boost_locale${Boost_LIB_SUFFIX})
find_library(Boost_LOG_SETUP NAMES boost_log_setup${Boost_LIB_SUFFIX})
find_library(Boost_LOG NAMES boost_log${Boost_LIB_SUFFIX})
find_library(Boost_MATH_C99F NAMES boost_math_c99f${Boost_LIB_SUFFIX})
find_library(Boost_MATH_C99L NAMES boost_math_c99l${Boost_LIB_SUFFIX})
find_library(Boost_MATH_C99 NAMES boost_math_c99${Boost_LIB_SUFFIX})
find_library(Boost_MATH_TR1F NAMES boost_math_tr1f${Boost_LIB_SUFFIX})
find_library(Boost_MATH_TR1L NAMES boost_math_tr1l${Boost_LIB_SUFFIX})
find_library(Boost_MATH_TR1 NAMES boost_math_tr1${Boost_LIB_SUFFIX})
find_library(Boost_NOWIDE NAMES boost_nowide${Boost_LIB_SUFFIX})
find_library(Boost_PRG_EXEC_MONITOR NAMES boost_prg_exec_monitor${Boost_LIB_SUFFIX})
find_library(Boost_PROGRAM_OPTIONS NAMES boost_program_options${Boost_LIB_SUFFIX})
find_library(Boost_RANDOM NAMES boost_random${Boost_LIB_SUFFIX})
find_library(Boost_REGEX NAMES boost_regex${Boost_LIB_SUFFIX})
find_library(Boost_SERIALIZATION NAMES boost_serialization${Boost_LIB_SUFFIX})
find_library(Boost_STACKTRACE_NOOP NAMES boost_stacktrace_noop${Boost_LIB_SUFFIX})
find_library(Boost_STACKTRACE_WINDBG NAMES boost_stacktrace_windbg${Boost_LIB_SUFFIX})
find_library(Boost_SYSTEM NAMES boost_system${Boost_LIB_SUFFIX})
#find_library(Boost_TEST_EXEC_MONITOR NAMES boost_test_exec_monitor${Boost_LIB_SUFFIX})
find_library(Boost_THREAD NAMES boost_thread${Boost_LIB_SUFFIX})
find_library(Boost_TIMER NAMES boost_timer${Boost_LIB_SUFFIX})
find_library(Boost_TYPE_ERASURE NAMES boost_type_erasure${Boost_LIB_SUFFIX})
find_library(Boost_UNIT_TEST_FRAMEWORK NAMES boost_unit_test_framework${Boost_LIB_SUFFIX})
find_library(Boost_WAVE NAMES boost_wave${Boost_LIB_SUFFIX})
find_library(Boost_WSERIALIZATION NAMES boost_wserialization${Boost_LIB_SUFFIX})

set(Boost_LIBRARIES
    ${Boost_ATOMIC}
    ${Boost_CHRONO}
    ${Boost_CONTAINER}
    ${Boost_CONTEXT}
    ${Boost_CONTRACT}
    ${Boost_COROUTINE}
    ${Boost_DATE_TIME}
    #${Boost_EXCEPTION}
    ${Boost_FIBER}
    ${Boost_FILESYTEM}
    ${Boost_GRAPH}
    ${Boost_IOSTREAMS}
    ${Boost_LOCALE}
    ${Boost_LOG_SETUP}
    ${Boost_LOG}
    ${Boost_MATH_C99F}
    ${Boost_MATH_C99L}
    ${Boost_MATH_C99}
    ${Boost_MATH_TR1F}
    ${Boost_MATH_TR1L}
    ${Boost_MATH_TR1}
    ${Boost_NOWIDE}
    ${Boost_PRG_EXEC_MONITOR}
    ${Boost_PROGRAM_OPTIONS}
    ${Boost_RANDOM}
    ${Boost_REGEX}
    ${Boost_SERIALIZATION}
    ${Boost_STACKTRACE_NOOP}
    ${Boost_STACKTRACE_WINDBG}
    ${Boost_SYSTEM}
    #${Boost_TEST_EXEC_MONITOR}
    ${Boost_THREAD}
    ${Boost_TIMER}
    ${Boost_TYPE_ERASURE}
    ${Boost_UNIT_TEST_FRAMEWORK}
    ${Boost_WAVE}
    ${Boost_WSERIALIZATION}
    ${ZLIB_LIBRARIES})

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
    Boost
    REQUIRED_VARS
        Boost_INCLUDE_DIR
        Boost_ATOMIC
        Boost_CHRONO
        Boost_CONTAINER
        Boost_CONTEXT
        Boost_CONTRACT
        Boost_COROUTINE
        Boost_DATE_TIME
        #Boost_EXCEPTION
        Boost_FIBER
        Boost_FILESYTEM
        Boost_GRAPH
        Boost_IOSTREAMS
        Boost_LOCALE
        Boost_LOG_SETUP
        Boost_LOG
        Boost_MATH_C99F
        Boost_MATH_C99L
        Boost_MATH_C99
        Boost_MATH_TR1F
        Boost_MATH_TR1L
        Boost_MATH_TR1
        Boost_NOWIDE
        Boost_PRG_EXEC_MONITOR
        Boost_PROGRAM_OPTIONS
        Boost_RANDOM
        Boost_REGEX
        Boost_SERIALIZATION
        Boost_STACKTRACE_NOOP
        Boost_STACKTRACE_WINDBG
        Boost_SYSTEM
        #Boost_TEST_EXEC_MONITOR
        Boost_THREAD
        Boost_TIMER
        Boost_TYPE_ERASURE
        Boost_UNIT_TEST_FRAMEWORK
        Boost_WAVE
        Boost_WSERIALIZATION)
mark_as_advanced(
    Boost_INCLUDE_DIR
    Boost_ATOMIC
    Boost_CHRONO
    Boost_CONTAINER
    Boost_CONTEXT
    Boost_CONTRACT
    Boost_COROUTINE
    Boost_DATE_TIME
    #Boost_EXCEPTION
    Boost_FIBER
    Boost_FILESYTEM
    Boost_GRAPH
    Boost_IOSTREAMS
    Boost_LOCALE
    Boost_LOG_SETUP
    Boost_LOG
    Boost_MATH_C99F
    Boost_MATH_C99L
    Boost_MATH_C99
    Boost_MATH_TR1F
    Boost_MATH_TR1L
    Boost_MATH_TR1
    Boost_NOWIDE
    Boost_PRG_EXEC_MONITOR
    Boost_PROGRAM_OPTIONS
    Boost_RANDOM
    Boost_REGEX
    Boost_SERIALIZATION
    Boost_STACKTRACE_NOOP
    Boost_STACKTRACE_WINDBG
    Boost_SYSTEM
    #Boost_TEST_EXEC_MONITOR
    Boost_THREAD
    Boost_TIMER
    Boost_TYPE_ERASURE
    Boost_UNIT_TEST_FRAMEWORK
    Boost_WAVE
    Boost_WSERIALIZATION)

if(Boost_FOUND AND NOT TARGET Boost::atomic)
    add_library(Boost::atomic UNKNOWN IMPORTED)
    set_target_properties(Boost::atomic PROPERTIES
        IMPORTED_LOCATION "${Boost_ATOMIC}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::chrono)
    add_library(Boost::chrono UNKNOWN IMPORTED)
    set_target_properties(Boost::chrono PROPERTIES
        IMPORTED_LOCATION "${Boost_CHRONO}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::container)
    add_library(Boost::container UNKNOWN IMPORTED)
    set_target_properties(Boost::container PROPERTIES
        IMPORTED_LOCATION "${Boost_CONTAINER}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::context)
    add_library(Boost::context UNKNOWN IMPORTED)
    set_target_properties(Boost::context PROPERTIES
        IMPORTED_LOCATION "${Boost_CONTEXT}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::contract)
    add_library(Boost::contract UNKNOWN IMPORTED)
    set_target_properties(Boost::contract PROPERTIES
        IMPORTED_LOCATION "${Boost_CONTRACT}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::coroutine)
    add_library(Boost::coroutine UNKNOWN IMPORTED)
    set_target_properties(Boost::coroutine PROPERTIES
        IMPORTED_LOCATION "${Boost_COROUTINE}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::date_time)
    add_library(Boost::date_time UNKNOWN IMPORTED)
    set_target_properties(Boost::date_time PROPERTIES
        IMPORTED_LOCATION "${Boost_DATE_TIME}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
#if(Boost_FOUND AND NOT TARGET Boost::exception)
#    add_library(Boost::exception UNKNOWN IMPORTED)
#    set_target_properties(Boost::exception PROPERTIES
#        IMPORTED_LOCATION "${Boost_EXCEPTION}"
#        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
#        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
#endif()
if(Boost_FOUND AND NOT TARGET Boost::fiber)
    add_library(Boost::fiber UNKNOWN IMPORTED)
    set_target_properties(Boost::fiber PROPERTIES
        IMPORTED_LOCATION "${Boost_FIBER}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::filesystem)
    add_library(Boost::filesystem UNKNOWN IMPORTED)
    set_target_properties(Boost::filesystem PROPERTIES
        IMPORTED_LOCATION "${Boost_FILESYTEM}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::graph)
    add_library(Boost::graph UNKNOWN IMPORTED)
    set_target_properties(Boost::graph PROPERTIES
        IMPORTED_LOCATION "${Boost_GRAPH}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::iostreams)
    add_library(Boost::iostreams UNKNOWN IMPORTED)
    set_target_properties(Boost::iostreams PROPERTIES
        IMPORTED_LOCATION "${Boost_IOSTREAMS}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::locale)
    add_library(Boost::locale UNKNOWN IMPORTED)
    set_target_properties(Boost::locale PROPERTIES
        IMPORTED_LOCATION "${Boost_LOCALE}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::log)
    add_library(Boost::log UNKNOWN IMPORTED)
    set_target_properties(Boost::log PROPERTIES
        IMPORTED_LOCATION "${Boost_LOG}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::math_c99)
    add_library(Boost::math_c99 UNKNOWN IMPORTED)
    set_target_properties(Boost::math_c99 PROPERTIES
        IMPORTED_LOCATION "${Boost_MATH_C99}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::math_c99f)
    add_library(Boost::math_c99f UNKNOWN IMPORTED)
    set_target_properties(Boost::math_c99f PROPERTIES
        IMPORTED_LOCATION "${Boost_MATH_C99F}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::math_c99l)
    add_library(Boost::math_c99l UNKNOWN IMPORTED)
    set_target_properties(Boost::math_c99l PROPERTIES
        IMPORTED_LOCATION "${Boost_MATH_C99L}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::math_tr1)
    add_library(Boost::math_tr1 UNKNOWN IMPORTED)
    set_target_properties(Boost::math_tr1 PROPERTIES
        IMPORTED_LOCATION "${Boost_MATH_TR1}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::math_tr1f)
    add_library(Boost::math_tr1f UNKNOWN IMPORTED)
    set_target_properties(Boost::math_tr1f PROPERTIES
        IMPORTED_LOCATION "${Boost_MATH_TR1F}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::math_tr1l)
    add_library(Boost::math_tr1l UNKNOWN IMPORTED)
    set_target_properties(Boost::math_tr1l PROPERTIES
        IMPORTED_LOCATION "${Boost_MATH_TR1L}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::nowide)
    add_library(Boost::nowide UNKNOWN IMPORTED)
    set_target_properties(Boost::nowide PROPERTIES
        IMPORTED_LOCATION "${Boost_NOWIDE}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::program_options)
    add_library(Boost::program_options UNKNOWN IMPORTED)
    set_target_properties(Boost::program_options PROPERTIES
        IMPORTED_LOCATION "${Boost_PROGRAM_OPTIONS}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::random)
    add_library(Boost::random UNKNOWN IMPORTED)
    set_target_properties(Boost::random PROPERTIES
        IMPORTED_LOCATION "${Boost_RANDOM}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::regex)
    add_library(Boost::regex UNKNOWN IMPORTED)
    set_target_properties(Boost::regex PROPERTIES
        IMPORTED_LOCATION "${Boost_REGEX}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::serialization)
    add_library(Boost::serialization UNKNOWN IMPORTED)
    set_target_properties(Boost::serialization PROPERTIES
        IMPORTED_LOCATION "${Boost_SERIALIZATION}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::stacktrace)
    add_library(Boost::stacktrace UNKNOWN IMPORTED)
    set_target_properties(Boost::stacktrace PROPERTIES
        IMPORTED_LOCATION "${Boost_STACKTRACE_NOOP}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::system)
    add_library(Boost::system UNKNOWN IMPORTED)
    set_target_properties(Boost::system PROPERTIES
        IMPORTED_LOCATION "${Boost_SYSTEM}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
#if(Boost_FOUND AND NOT TARGET Boost::test)
#    add_library(Boost::test UNKNOWN IMPORTED)
#    set_target_properties(Boost::test PROPERTIES
#        IMPORTED_LOCATION "${Boost_TEST_EXEC_MONITOR}"
#        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
#        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
#endif()
if(Boost_FOUND AND NOT TARGET Boost::thread)
    add_library(Boost::thread UNKNOWN IMPORTED)
    set_target_properties(Boost::thread PROPERTIES
        IMPORTED_LOCATION "${Boost_THREAD}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::timer)
    add_library(Boost::timer UNKNOWN IMPORTED)
    set_target_properties(Boost::timer PROPERTIES
        IMPORTED_LOCATION "${Boost_TIMER}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::type_erasure)
    add_library(Boost::type_erasure UNKNOWN IMPORTED)
    set_target_properties(Boost::type_erasure PROPERTIES
        IMPORTED_LOCATION "${Boost_TYPE_ERASURE}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost::wave)
    add_library(Boost::wave UNKNOWN IMPORTED)
    set_target_properties(Boost::wave PROPERTIES
        IMPORTED_LOCATION "${Boost_WAVE}"
        INTERFACE_COMPILE_DEFINITIONS Boost_FOUND
        INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIR}")
endif()
if(Boost_FOUND AND NOT TARGET Boost)
    add_library(Boost INTERFACE)
    target_link_libraries(Boost INTERFACE Boost::atomic)
    target_link_libraries(Boost INTERFACE Boost::chrono)
    target_link_libraries(Boost INTERFACE Boost::container)
    target_link_libraries(Boost INTERFACE Boost::context)
    target_link_libraries(Boost INTERFACE Boost::contract)
    target_link_libraries(Boost INTERFACE Boost::coroutine)
    target_link_libraries(Boost INTERFACE Boost::date_time)
    #target_link_libraries(Boost INTERFACE Boost::exception)
    target_link_libraries(Boost INTERFACE Boost::fiber)
    target_link_libraries(Boost INTERFACE Boost::filesystem)
    target_link_libraries(Boost INTERFACE Boost::graph)
    target_link_libraries(Boost INTERFACE Boost::iostreams)
    target_link_libraries(Boost INTERFACE Boost::locale)
    target_link_libraries(Boost INTERFACE Boost::log)
    target_link_libraries(Boost INTERFACE Boost::math_c99)
    target_link_libraries(Boost INTERFACE Boost::math_c99f)
    target_link_libraries(Boost INTERFACE Boost::math_c99l)
    target_link_libraries(Boost INTERFACE Boost::math_tr1)
    target_link_libraries(Boost INTERFACE Boost::math_tr1f)
    target_link_libraries(Boost INTERFACE Boost::math_tr1l)
    target_link_libraries(Boost INTERFACE Boost::nowide)
    target_link_libraries(Boost INTERFACE Boost::program_options)
    target_link_libraries(Boost INTERFACE Boost::random)
    target_link_libraries(Boost INTERFACE Boost::regex)
    target_link_libraries(Boost INTERFACE Boost::serialization)
    target_link_libraries(Boost INTERFACE Boost::stacktrace)
    target_link_libraries(Boost INTERFACE Boost::system)
    #target_link_libraries(Boost INTERFACE Boost::test)
    target_link_libraries(Boost INTERFACE Boost::thread)
    target_link_libraries(Boost INTERFACE Boost::timer)
    target_link_libraries(Boost INTERFACE Boost::type_erasure)
    target_link_libraries(Boost INTERFACE Boost::wave)
endif()
